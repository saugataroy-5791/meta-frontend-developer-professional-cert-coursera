In this module you will explore the basic structure and use of the React.js library. You will learn how to produce single page web applications using React components and to use JSX to style them.
Learning Objectives
Explain the concepts behind React and component architecture
Create a component to serve a specific purpose
Create a component folder and demonstrate how to create and import files within that folder
Use and manipulate props and components to effect visual results
Describe how to use assets within an app to apply styling and functional components

State:
    State is simply all the values of all the variables your app is working with at any given point in time.

Creating First Ract App:
    1. npm init react-app my-first-app
    2. cd my-first-app
    3. npm start
       See result in the live server

    Note:
        npm start: 
            Runs the app in the development mode. Open http://localhost:3000 to view it in the browser.
        
        npm test: 
            Launches the test runner in the interactive watch mode.

        npm run build: 
            Builds the app for production to the build folder. It correctly bundles React in production mode and optimizes the build for the best performance.

        npm run eject
            Note: this is a one-way operation. Once you eject, you can’t go back!
            If you aren’t satisfied with the build tool and configuration choices, you can eject at any time. This command will remove the single build dependency from your project.

React Components and Where They Live
            Why React?
                React use Composition
                Client Side library
                Complex UI's
                Single Page Application
                Flexibility
            Architecture:
                React use Component Based Architecture
                React use Virtual DOM

            This is essentially a design philosophy for building software based on reusable components of code. Each component consists of well-defined functionality that can be inserted into an application without requiring modification of other components. Because components are reusable, they can be used multiple times and easily inserted anywhere we're needed. This results in components that can exist within the same space yet interact independently from each other.

             SPA(Single Page Application)
                React enables developers to build SPAs (single page applications).

                A technology that loads a single web page and performs updates to the DOM on this single web page based on user interaction with this web page in known as a SPA. Indeed, React allows developers to build SPAs. 

            React Virtual DOM  
                Clone of the real DOM which minimizes updates to the DOM itself. React uses the virtual DOM to update the browser Dom only when needed. 

            React Components
                a. Functional Components   
                b. Class Components

            JSX: Javascript XML (Syntax Extension to Javascript)
                Combination of Custom Html and Javascript

            Creating Component:
                a. All Components name must be captalized
                b. Enclose variables etc in {}
                c. React Distinguish JSX from html through Captilazation
-------------------------------------------------------------------------
            Example:
--------------------
                (file name)
                (component)
                1. App.js  
                2.       function App(){
                            let pageTitle = "This is my Page Title";

                            return (
                                <h1> {pageTitle} </h1>
                            );
                        }

                        export default App;
-------------------------------------------------------------------------
                Transpiling:
                    Transpiling as a process of converting JSX to HTML 

                
                Babel
                    What Babel does is this: it allows you to transpile JSX code (which cannot be understood by a browser) into plain JavaScript code (which can be understood by a browser).

React Project Structure
        -> node-modules/
        -> public/
        -> src/
        -> root-files

Component: Single piece of functionality
Module: Series of Components

Principles of components: Prop

props(properties)
    Props allow you to pass data from one component to another. It's helpful to think of props as arguments a component can accept and are passed using JSX syntax, much like HTML attributes. 

Parent: Component Sending the data
Child: Componenet Recieving the data

It is a one way communication: i.e., Parent to Child but not from child to parent



In React, functional components are reusable blocks of code that act like a JavaScript function and you can pass data from one component to another using props. Which of the following statements are true? Select all that apply. 
     


Props are passed using JSX syntax.

Correct
That's correct. It's helpful to think of props as arguments that components can accept and are passed using JSX.


Props are like a JavaScript object.

Correct
That's correct. Props are like a JavaScript object in that they can accept many data types including strings, integers, functions, arrays and objects.     


When two components communicate with each other, the component sending the props data is known as the parent and the one receiving the data is known as the child.   

Correct
That's correct. Data flow is one-directional which means that a parent component can send the same data to one or more child components, but it's not possible to communicate from the child components back to the parent component using props.   

Pure Function

Introduction to JSX
    JSX allows developers to write HTML directly inside the JavaScript code.
    Fragment: <> /*Contains Elements*/ </>