Solution: Can you fetch data?
Here is the completed solution code for the App.js file:

import React from "react";

function App() {
  const [user, setUser] = React.useState([]);

  const fetchData = () => {
    fetch("https://randomuser.me/api/?results=1")
      .then((response) => response.json())
      .then((data) => setUser(data));
  };

  React.useEffect(() => {
    fetchData();
  }, []);

  return Object.keys(user).length > 0 ? (
    <div style={{padding: "40px"}}>
      <h1>Customer data</h1>
      <h2>Name: {user.results[0].name.first}</h2>
      <img src={user.results[0].picture.large} alt="" />
    </div>
  ) : (
    <h1>Data pending...</h1>
  );
}

export default App;

Here is the sample output from the solution code for the App.js file. Note that the lab produces a different random image and name with each refresh, so your output is likely to have a different name and a different customer image than the one shown below.

Customer data including profile picture and name
Step-by-step solution
Step 1
Inside the fetchData() function's code block, you executed the fetch() function, passing it a single string argument: "https://randomuser.me/api/?results=1".

const fetchData = () => {
fetch("https://randomuser.me/api/?results=1")
};

Step 2
Next, inside the fetchData() function, under the fetch() function call, you added the following piece of code:

const fetchData = () => {
fetch("https://randomuser.me/api/?results=1")
        .then((response) => response.json())
};

Step 3
You then added another then() call, which takes an arrow function.

The passed-in arrow function, receives a data argument, and using that data argument, it invokes the setUser() function, with the data passed to it.

const fetchData = () => {
fetch("https://randomuser.me/api/?results=1")
      .then((response) => response.json())
      .then((data) => setUser(data));
  };


Step 4
In the return statement of the App component, under the h1 heading that reads “Customer data”,  you added an h2 heading, with the following code: Name: {user.results[0].name.first}

return Object.keys(user).length > 0 ? (
<div style={{padding: "40px"}}>
<h1>Customer data</h1>
<h2>Name: {user.results[0].name.first}</h2>
</div>
    ) : (
<h1>Data pending...</h1>
);

Step 5
You then updated the return statement of the App component by adding another line of code under the newly-added h2.

You added an img element, with the src attribute and an alt attribute holding the following code: {user.results[0].picture.large}

return Object.keys(user).length > 0 ? (
<div style={{padding: "40px"}}>
<h1>Customer data</h1>
<h2>Name: {user.results[0].name.first}</h2>
<img src={user.results[0].picture.large}alt="" />
</div>
    ) : (
<h1>Data pending...</h1>
);
